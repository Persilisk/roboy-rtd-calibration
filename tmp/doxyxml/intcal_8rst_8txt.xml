<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="intcal_8rst_8txt" kind="file" language="C++">
    <compoundname>intcal.rst.txt</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="intcal_8rst_8txt_1af27fafdf9f3031e2c34cd860a4762cf7" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the code</definition>
        <argsstring></argsstring>
        <name>code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="3" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a51f665a968ffaf3cdcd1f7ad21101cec" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor B</definition>
        <argsstring></argsstring>
        <name>B</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="7" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a21a9705e61a9dd0573131c3f9d42c40a" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system states</definition>
        <argsstring></argsstring>
        <name>states</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="13" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a8f3b8feca739588919fe9e3e1d3aea94" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external factors</definition>
        <argsstring></argsstring>
        <name>factors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="21" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a2f6deef932b6decc2f035a4a6e5f5f9b" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement noticeable</definition>
        <argsstring></argsstring>
        <name>noticeable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="21" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1ad6e834fce45151c8e5e98778959ad162" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to that</definition>
        <argsstring></argsstring>
        <name>that</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="23" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a3e0d0ae673a960dc9b958895305d7be3" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors Now</definition>
        <argsstring></argsstring>
        <name>Now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="26" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1ab4daf8e117bb0cde9c57f6f82a609dd2" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is moved</definition>
        <argsstring></argsstring>
        <name>moved</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="26" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1ac5791f197191a4f4d540420806a2805f" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor positions</definition>
        <argsstring></argsstring>
        <name>positions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="29" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1ae5698faeb6e83b058d6d6da824da3d5c" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot part</definition>
        <argsstring></argsstring>
        <name>part</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="29" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a1041d26fcfaa08bc5610ee848638641a" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for this</definition>
        <argsstring></argsstring>
        <name>this</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="29" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1ac585871a5417b93dd60f336383cfae46" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered limits</definition>
        <argsstring></argsstring>
        <name>limits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="29" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1ab75b069dc7012b7bf7e04367f61d32dc" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our case</definition>
        <argsstring></argsstring>
        <name>case</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="35" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a78e6e96f37431f44ee41224192e013c3" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The class</definition>
        <argsstring></argsstring>
        <name>class</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="37" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1acae989d994456cd1dca11c951364fe1f" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller classes</definition>
        <argsstring></argsstring>
        <name>classes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="38" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1ae9983f244420a0aea937d63432195d57" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be changed</definition>
        <argsstring></argsstring>
        <name>changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="38" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a2ba81dd748101decc4329ac2346df006" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be but they might help you to understand how things work As we need to work with the force spring displacement of the</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be but they might help you to understand how things work As we need to work with the force spring displacement of the motors</definition>
        <argsstring></argsstring>
        <name>motors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="38" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1aa7dde5a9eba2f8b2634189475643c390" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be but they might help you to understand how things work As we need to work with the force spring displacement of the please initialize the motors as force controllers roboy_powerlink manages the connection to the FPGA Earlier or later commits of this submodule change the</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be but they might help you to understand how things work As we need to work with the force spring displacement of the please initialize the motors as force controllers roboy_powerlink manages the connection to the FPGA Earlier or later commits of this submodule change the communication</definition>
        <argsstring></argsstring>
        <name>communication</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="40" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="intcal_8rst_8txt_1a8b75bd149fb842c43fbba56e9863d014" prot="public" static="no" mutable="no">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array[1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be but they might help you to understand how things work As we need to work with the force spring displacement of the please initialize the motors as force controllers roboy_powerlink manages the connection to the FPGA Earlier or later commits of this submodule change the which leads to errors If the PaBiLegs won t react with the right</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the array [1] for motor The roboy ros control code goes through the following system the robot should hang on the frame without touching the floor This reduces external that might complicate measurements In the beginning it is best to tighten each motor until there is a little spring displacement as force changes can only be detected properly when each sensor has valid values to begin with Following up to a single motor shall increase its force The joint with the highest angle difference will be connected to that motor and the program can save this gained information The force changes of the other motor springs might also give a hint on the second motor of the pair This can be repeated for all motors the amount of possible positions for each motor is reduced to two As the forces change on all motors when one part of the robot is one can determine whether a motor is on the inner or outer side of a joint Here it might help to play around a little with the GUI of the myoFPGA the force on the other motors in or decreases in a regular pattern After assigning the motor the robot has to move into its initial pose In order to figure out the current absolute position of a robot it has to be moved to its limit Two motors need to be steered for as each robot part is moved by two motors With the discovered each robot part can enter its predefined relative position and the robot is ready for further use The roboy ros control repository consists of many submodules Some of them like the roboy_simulation or roboy_models repositories aren t needed for our but it s better to leave them where they are The which contains the is called roboy cpp with the corresponding header roboy hpp Both files are part of the roboy_managing_node repository and can be found in the folders include and src roboy cpp uses methods from the controller which can be found in the roboy_controller repository These classes don t need to be but they might help you to understand how things work As we need to work with the force spring displacement of the please initialize the motors as force controllers roboy_powerlink manages the connection to the FPGA Earlier or later commits of this submodule change the which leads to errors If the PaBiLegs won t react with the right commit</definition>
        <argsstring></argsstring>
        <name>commit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="40" column="1" bodyfile="build/html/_sources/intcal.rst.txt" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="intcal_8rst_8txt_1a6457427190cb7c84b89d692b374d1cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the</type>
        <definition>The PaBiLegs shall be put into an initial pose during the calibration procedure All eight motors shall each be assigned to their position on the robot and tightended in order to hold the initial pose Their positions will be saved in the so that further programs can address a motor position and don t have to care about its slot number on the FPGA</definition>
        <argsstring>(img/PaBiLegsABC.jpg) This picture shows a possible order for the motor positions.The corresponding slot number can be saved i.e.in an array.One would then only have to address the array[0] for motor A</argsstring>
        <name>FPGA</name>
        <param>
          <type>img/PaBiLegsABC.</type>
          <declname>jpg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_sources/intcal.rst.txt" line="3" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#<sp/>Goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">The<sp/>PaBiLegs<sp/>shall<sp/>be<sp/>put<sp/>into<sp/>an<sp/>initial<sp/>pose<sp/>during<sp/>the<sp/>calibration<sp/>procedure.<sp/>All<sp/>eight<sp/>motors<sp/>shall<sp/>each<sp/>be<sp/>assigned<sp/>to<sp/>their<sp/>position<sp/>on<sp/>the<sp/>robot<sp/>and<sp/>tightended<sp/>in<sp/>order<sp/>to<sp/>hold<sp/>the<sp/>initial<sp/>pose.<sp/>Their<sp/>positions<sp/>will<sp/>be<sp/>saved<sp/>in<sp/>the<sp/>code,<sp/>so<sp/>that<sp/>further<sp/>programs<sp/>can<sp/>address<sp/>a<sp/>motor<sp/>position<sp/>and<sp/>don</highlight><highlight class="stringliteral">&apos;t<sp/>have<sp/>to<sp/>care<sp/>about<sp/>its<sp/>slot<sp/>number<sp/>on<sp/>the<sp/>FPGA.</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">![](img/PaBiLegsABC.jpg)</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">This<sp/>picture<sp/>shows<sp/>a<sp/>possible<sp/>order<sp/>for<sp/>the<sp/>motor<sp/>positions.<sp/>The<sp/>corresponding<sp/>slot<sp/>number<sp/>can<sp/>be<sp/>saved<sp/>i.e.<sp/>in<sp/>an<sp/>array.<sp/>One<sp/>would<sp/>then<sp/>only<sp/>have<sp/>to<sp/>address<sp/>the<sp/>array[0]<sp/>for<sp/>motor<sp/>A,<sp/>array[1]<sp/>for<sp/>motor<sp/>B,...</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">#<sp/>Current<sp/>Approach</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">The<sp/>roboy-ros-control<sp/>code<sp/>goes<sp/>through<sp/>the<sp/>following<sp/>system<sp/>states:</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral">*<sp/>**WaitForInitialize**<sp/>motors<sp/>are<sp/>initialized<sp/>via<sp/>command<sp/>line<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral">*<sp/>**ResetPowerlinkStack**<sp/>resets<sp/>Powerlink<sp/>Stack</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral">*<sp/>**Controlloop**<sp/>waits<sp/>for<sp/>input<sp/>via<sp/>command<sp/>line<sp/>and<sp/>moves<sp/>the<sp/>motors<sp/>accordingly</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">A<sp/>fourth<sp/>state<sp/>**Calibration**<sp/>is<sp/>added<sp/>between<sp/>ResetPowerlinkStack<sp/>and<sp/>Controlloop.<sp/>This<sp/>will<sp/>calibrate<sp/>the<sp/>robot<sp/>within<sp/>the<sp/>setup<sp/>procedure.</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">For<sp/>the<sp/>calibration<sp/>procedure,<sp/>the<sp/>robot<sp/>should<sp/>hang<sp/>on<sp/>the<sp/>frame<sp/>without<sp/>touching<sp/>the<sp/>floor.<sp/>This<sp/>reduces<sp/>external<sp/>factors,<sp/>that<sp/>might<sp/>complicate<sp/>measurements.<sp/>In<sp/>the<sp/>beginning<sp/>it<sp/>is<sp/>best<sp/>to<sp/>tighten<sp/>each<sp/>motor<sp/>until<sp/>there<sp/>is<sp/>a<sp/>little<sp/>spring<sp/>displacement<sp/>noticeable,<sp/>as<sp/>force<sp/>changes<sp/>can<sp/>only<sp/>be<sp/>detected<sp/>properly<sp/>when<sp/>each<sp/>sensor<sp/>has<sp/>valid<sp/>values<sp/>to<sp/>begin<sp/>with.</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">Following<sp/>up<sp/>to<sp/>that,<sp/>a<sp/>single<sp/>motor<sp/>shall<sp/>increase<sp/>its<sp/>force.<sp/>The<sp/>joint<sp/>with<sp/>the<sp/>highest<sp/>angle<sp/>difference<sp/>will<sp/>be<sp/>connected<sp/>to<sp/>that<sp/>motor<sp/>and<sp/>the<sp/>program<sp/>can<sp/>save<sp/>this<sp/>gained<sp/>information.<sp/>The<sp/>force<sp/>changes<sp/>of<sp/>the<sp/>other<sp/>motor<sp/>springs<sp/>might<sp/>also<sp/>give<sp/>a<sp/>hint<sp/>on<sp/>the<sp/>second<sp/>motor<sp/>of<sp/>the<sp/>pair.</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">This<sp/>can<sp/>be<sp/>repeated<sp/>for<sp/>all<sp/>motors.</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">Now,<sp/>the<sp/>amount<sp/>of<sp/>possible<sp/>positions<sp/>for<sp/>each<sp/>motor<sp/>is<sp/>reduced<sp/>to<sp/>two.<sp/>As<sp/>the<sp/>forces<sp/>change<sp/>on<sp/>all<sp/>motors<sp/>when<sp/>one<sp/>part<sp/>of<sp/>the<sp/>robot<sp/>is<sp/>moved,<sp/>one<sp/>can<sp/>determine<sp/>whether<sp/>a<sp/>motor<sp/>is<sp/>on<sp/>the<sp/>inner<sp/>or<sp/>outer<sp/>side<sp/>of<sp/>a<sp/>joint.</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral">Here<sp/>it<sp/>might<sp/>help<sp/>to<sp/>play<sp/>around<sp/>a<sp/>little<sp/>with<sp/>the<sp/>GUI<sp/>of<sp/>the<sp/>myoFPGA-code:<sp/>The<sp/>diagrams<sp/>show<sp/>all<sp/>force<sp/>changes<sp/>and<sp/>joint<sp/>displacements.<sp/>Depending<sp/>on<sp/>which<sp/>motor<sp/>is<sp/>moved,<sp/>the<sp/>force<sp/>on<sp/>the<sp/>other<sp/>motors<sp/>in-<sp/>or<sp/>decreases<sp/>in<sp/>a<sp/>regular<sp/>pattern.</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">After<sp/>assigning<sp/>the<sp/>motor<sp/>positions,<sp/>the<sp/>robot<sp/>has<sp/>to<sp/>move<sp/>into<sp/>its<sp/>initial<sp/>pose.<sp/>In<sp/>order<sp/>to<sp/>figure<sp/>out<sp/>the<sp/>current<sp/>absolute<sp/>position<sp/>of<sp/>a<sp/>robot<sp/>part,<sp/>it<sp/>has<sp/>to<sp/>be<sp/>moved<sp/>to<sp/>its<sp/>limit.<sp/>Two<sp/>motors<sp/>need<sp/>to<sp/>be<sp/>steered<sp/>for<sp/>this,<sp/>as<sp/>each<sp/>robot<sp/>part<sp/>is<sp/>moved<sp/>by<sp/>two<sp/>motors.<sp/>With<sp/>the<sp/>discovered<sp/>limits,<sp/>each<sp/>robot<sp/>part<sp/>can<sp/>enter<sp/>its<sp/>predefined<sp/>relative<sp/>position<sp/>and<sp/>the<sp/>robot<sp/>is<sp/>ready<sp/>for<sp/>further<sp/>use.</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">#<sp/>Code<sp/>structure</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">The<sp/>roboy-ros-control<sp/>repository<sp/>consists<sp/>of<sp/>many<sp/>submodules.<sp/>Some<sp/>of<sp/>them<sp/>-<sp/>like<sp/>the<sp/>`roboy_simulation`<sp/>or<sp/>`roboy_models`<sp/>repositories<sp/>-<sp/>aren&apos;</highlight><highlight class="normal">t<sp/>needed<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>our<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal">,<sp/>but<sp/>it</highlight><highlight class="stringliteral">&apos;s<sp/>better<sp/>to<sp/>leave<sp/>them<sp/>where<sp/>they<sp/>are.</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">The<sp/>class,<sp/>which<sp/>contains<sp/>the<sp/>code,<sp/>is<sp/>called<sp/>&quot;roboy.cpp&quot;<sp/>with<sp/>the<sp/>corresponding<sp/>header<sp/>&quot;roboy.hpp&quot;.<sp/>Both<sp/>files<sp/>are<sp/>part<sp/>of<sp/>the<sp/>`roboy_managing_node`<sp/>repository<sp/>and<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>folders<sp/>/include<sp/>and<sp/>/src.</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">&quot;roboy.cpp&quot;<sp/>uses<sp/>methods<sp/>from<sp/>the<sp/>controller<sp/>classes,<sp/>which<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>`roboy_controller`<sp/>repository.<sp/>These<sp/>classes<sp/>don&apos;</highlight><highlight class="normal">t<sp/>need<sp/>to<sp/>be<sp/>changed,<sp/>but<sp/>they<sp/>might<sp/>help<sp/>you<sp/>to<sp/>understand<sp/>how<sp/>things<sp/>work.<sp/>As<sp/>we<sp/>need<sp/>to<sp/>work<sp/>with<sp/>the<sp/>force/spring<sp/>displacement<sp/>of<sp/>the<sp/>motors,<sp/>please<sp/>initialize<sp/>the<sp/>motors<sp/>as<sp/>force<sp/>controllers.</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">`roboy_powerlink`<sp/>manages<sp/>the<sp/>connection<sp/>to<sp/>the<sp/>FPGA.<sp/>Earlier<sp/>or<sp/>later<sp/>commits<sp/>of<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>submodule<sp/>change<sp/>the<sp/>communication,<sp/>which<sp/>leads<sp/>to<sp/>errors.<sp/>If<sp/>the<sp/>PaBiLegs<sp/>won</highlight><highlight class="stringliteral">&apos;t<sp/>react<sp/>with<sp/>the<sp/>right<sp/>commit,<sp/>you<sp/>might<sp/>need<sp/>to<sp/>flash<sp/>the<sp/>FPGA.</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">#<sp/>Progress<sp/>so<sp/>far</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">The<sp/>calibration<sp/>code<sp/>shall<sp/>be<sp/>implemented<sp/>in<sp/>the<sp/>[roboy-ros-control](https://github.com/Roboy/roboy-ros-control)<sp/>repository.<sp/>Many<sp/>people<sp/>work<sp/>on<sp/>its<sp/>modules,<sp/>which<sp/>leads<sp/>to<sp/>complications<sp/>with<sp/>the<sp/>code.<sp/>The<sp/>current<sp/>version<sp/>is<sp/>found<sp/>[here](https://github.com/Persilisk/roboy-ros-control)<sp/>with<sp/>the<sp/>correct<sp/>commits<sp/>of<sp/>its<sp/>submodules.<sp/>Until<sp/>now<sp/>the<sp/>motors<sp/>can<sp/>be<sp/>steered<sp/>only<sp/>via<sp/>commandline.<sp/>The<sp/>&quot;Using<sp/>roboy-ros-control<sp/>instead<sp/>of<sp/>myoFPGA<sp/>repository&quot;<sp/>[tutorial](https://devanthro.atlassian.net/wiki/spaces/CO/pages/75250222/Tutorial+of+how+to+control+the+PaBiLegs)<sp/>explains<sp/>how<sp/>this<sp/>can<sp/>be<sp/>done.</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">#<sp/>What<sp/>to<sp/>do<sp/>next?</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">Until<sp/>now,<sp/>most<sp/>of<sp/>the<sp/>work<sp/>has<sp/>been<sp/>research<sp/>and<sp/>conceptual<sp/>design.<sp/>You<sp/>can<sp/>find<sp/>further<sp/>information<sp/>about<sp/>the<sp/>progress<sp/>in<sp/>Confluence.<sp/>The<sp/>[weekly<sp/>reports](https://devanthro.atlassian.net/wiki/display/CO/Johanna+Steer)<sp/>show<sp/>further<sp/>approaches<sp/>and<sp/>why<sp/>they<sp/>didn&apos;</highlight><highlight class="normal">t<sp/>work.</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">The<sp/>next<sp/>steps<sp/>are<sp/>a<sp/>first<sp/>implementation<sp/>of<sp/>calibration<sp/>and<sp/>the<sp/>definition<sp/>of<sp/>an<sp/>initial<sp/>pose,<sp/>with<sp/>which<sp/>the<sp/>cognition<sp/>team<sp/>can<sp/>work.<sp/>When<sp/>the<sp/>PaBiLegs<sp/>have<sp/>a<sp/>working<sp/>calibration<sp/>method,<sp/>it<sp/>should<sp/>be<sp/>adapted<sp/>to<sp/>work<sp/>on<sp/>other<sp/>robots,<sp/>i.e.<sp/>the<sp/>robot<sp/>arm<sp/>which<sp/>moves<sp/>in<sp/>three<sp/>dimensions.</highlight></codeline>
    </programlisting>
    <location file="build/html/_sources/intcal.rst.txt"/>
  </compounddef>
</doxygen>
